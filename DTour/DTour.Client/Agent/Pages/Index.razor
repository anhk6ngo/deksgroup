@page "/agent"

<SectionContent SectionName="@NavConstants.TbLeft">
    <Breadcrumb Slash="true"></Breadcrumb>
    <Breadcrumb TextMuted="true">@Loc["Dash board"]</Breadcrumb>
</SectionContent>
<SectionContent SectionName="@NavConstants.TbRight">
    <input @bind="DateRange" class="form-control form-control-sm w-200px mx-2" placeholder="Pick date range"
           id="RangeDate"/>
    <button class="btn btn-sm btn-primary" @onclick="GetData">@Loc["View Report"]</button>
</SectionContent>
@if (IsLoading)
{
    <LoadingRotate/>
}
<div class="row g-5 gx-xl-10 mb-5 mb-xl-10 bg-light-primary">
    <div class="col-12 col-md-6 col-xxl d-flex">
        <div class="card flex-fill">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <span class="fs-4 fw-semibold text-gray-500 me-1 align-self-start">$</span>
                    <span
                        class="fs-1 fw-bold text-gray-900 me-2 lh-1 ls-n2">@_balanceDto?.Amount.ToString("N2")</span>
                </div>
                <span class="text-gray-500 pt-1 fw-semibold fs-6">@Loc["Balance"]</span>
            </div>
        </div>
    </div>
    <div class="col-12 col-md-6 col-xxl d-flex">
        <div class="card flex-fill">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <span class="fs-4 fw-semibold text-gray-500 me-1 align-self-start">$</span>
                    <span
                        class="fs-1 fw-bold text-gray-900 me-2 lh-1 ls-n2">@_balanceDto?.DepositAmount.ToString("N2")</span>
                </div>
                <span class="text-gray-500 pt-1 fw-semibold fs-6">@Loc["Deposit"]</span>
            </div>
        </div>
    </div>
    <div class="col-12 col-md-6 col-xxl d-flex">
        <div class="card flex-fill">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <span class="fs-4 fw-semibold text-gray-500 me-1 align-self-start">$</span>
                    <span
                        class="fs-1 fw-bold text-gray-900 me-2 lh-1 ls-n2">@_items?.Sum(s => s.Amount).ToString("N2")</span>
                </div>
                <span class="text-gray-500 pt-1 fw-semibold fs-6">@Loc["Total Amount"]</span>
            </div>
        </div>
    </div>
    <div class="col-12 col-md-6 col-xxl d-flex">
        <div class="card flex-fill">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <i class="me-1 align-self-start ki-duotone ki-abstract-29 text-info fs-2">
                        <span class="path1"></span>
                        <span class="path2"></span>
                    </i>
                    <span
                        class="fs-2hx fw-bold text-gray-900 me-2 lh-1 ls-n2">@_items?.Sum(s => s.ActiveNo + s.DeActiveNo)</span>
                </div>
                <span class="text-gray-500 pt-1 fw-semibold fs-6">@Loc["Total Booking"]</span>
            </div>
        </div>
    </div>
    <div class="col-12 col-md-6 col-xxl d-flex d-none d-xxl-flex">
        <div class="card flex-fill">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <i class="me-1 align-self-start ki-duotone ki-eraser text-danger fs-2">
                        <span class="path1"></span>
                        <span class="path2"></span>
                        <span class="path3"></span>
                    </i>
                    <span class="fs-2hx fw-bold text-gray-900 me-2 lh-1 ls-n2">@_items?.Sum(s => s.DeActiveNo)</span>
                </div>
                <span class="text-gray-500 pt-1 fw-semibold fs-6">@Loc["Total Cancel"]</span>
            </div>
        </div>
    </div>
</div>
@if (!IsLoading)
{
    <div class="row mb-6">
        <div class="col-md-8">
            <div class="card card-flush overflow-hidden h-md-100">
                <div class="card-header py-5">
                    <h3 class="card-title align-items-start flex-column">
                        <span class="card-label fw-bold text-gray-900">@Loc["Statistics Booking"]</span>
                    </h3>
                </div>
                <div class="card-body d-flex justify-content-between flex-column pb-1 px-0">
                    <div id="charts_1" class="min-h-auto ps-4 pe-6" style="height: 300px"></div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card card-flush overflow-hidden h-md-100">
                <div class="card-header py-5">
                    <h3 class="card-title align-items-start flex-column">
                        <span class="card-label fw-bold text-gray-900">@Loc["Statistics Service"]</span>
                    </h3>
                </div>
                <div class="card-body d-flex justify-content-between flex-column pb-1 px-0">
                    <div id="charts_2" class="min-h-auto ps-4 pe-6" style="height: 300px"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="card shadow-sm">
        <div class="card-body">
            <table class="table table-hover table-rounded table-striped border gy-7 gs-7" id="@UiConstants.TableId">
                <thead>
                <tr class="fw-semibold fs-6 text-gray-800 border-bottom-2 border-gray-200">
                    <th>@Loc["Date"]</th>
                    <th>@Loc["Booking Type"]</th>
                    <th>@Loc["Total Amount"]</th>
                    <th>@Loc["Total Booking"]</th>
                    <th>@Loc["Total Cancel"]</th>
                </tr>
                </thead>
                <tbody>
                @if (_items is { Count: > 0 })
                {
                    foreach (var item in _items)
                    {
                        <tr>
                            <td>@item.TransDate.ToDmy()</td>
                            <td>@Loc[(item.TicketType == 0 ? "Air" : "Train")]</td>
                            <td>@item.Amount.ToString("N2")</td>
                            <td>@(item.ActiveNo + item.DeActiveNo)</td>
                            <td>@item.DeActiveNo</td>
                        </tr>
                    }
                }
                </tbody>
            </table>
            @if (_data is { Count: > 0 })
            {
                <div class="separator my-10"></div>
                <div class="table-responsive">
                    <table class="table table-hover table-rounded table-striped border gy-7 gs-7"
                           id="@UiConstants.StaticId">
                        <thead>
                        <tr class="fw-semibold fs-6 text-gray-800 border-bottom-2 border-gray-200">
                            <th class="min-w-200px">@Loc["Name"]</th>
                            <th>@Loc["Pnr"]</th>
                            <th class="min-w-125px">@Loc["Date"]</th>
                            <th class="min-w-125px">@Loc["Departure Date"]</th>
                            <th class="min-w-250px">@Loc["Route"]</th>
                            <th class="min-w-150px">@Loc["Amount"]</th>
                            <th class="min-w-150px">@Loc["Commission"]</th>
                            <th class="min-w-150px">@Loc["Payment Type"]</th>
                            <th class="min-w-150px">@Loc["Ticket Type"]</th>
                            <th class="min-w-150px">@Loc["Code"]</th>
                        </tr>
                        </thead>
                        <tbody>
                        @if (_items is { Count: > 0 })
                        {
                            foreach (var item in _data)
                            {
                                <tr>
                                    <td>@item.DisplayName</td>
                                    <td>@item.Pnr</td>
                                    <td>@item.TranDate?.ToLocalTime().ToDmy()</td>
                                    <td>@item.DepartDate.ToLocalTime().ToDmy()</td>
                                    <td>@item.From - @item.To</td>
                                    <td>@item.Amount.ToString("N2")</td>
                                    <td>@item.CommitAmount.ToString("N2")</td>
                                    <th>@Loc[(item.PaymentType == 0 ? "Card" : "Cash")]</th>
                                    <th>@Loc[(item.TicketType == 0 ? "Air" : "Train")]</th>
                                    <td>@item.TransactionId</td>
                                </tr>
                            }
                        }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
}


@code {
    [CascadingParameter] private UserInfo? ShareUserInfo { get; set; }
    private UserBalanceDto? _balanceDto = new();

    private GetReportRequest _request = new()
    {
    };

    private List<SumBookingResponse>? _items = [];
    private List<StoreBookingDto>? _data = [];
    private bool _initChart = false;

    protected override void OnInitialized()
    {
        DateRange = "".InitDateRange();
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CallInitRangeDate();
            _balanceDto = await _httpService.GetAsync<UserBalanceDto>($"{ShareEndpoints.TopUp}");
            await GetData();
        }

        if (_initChart)
        {
            _initChart = false;
            if (_items is { Count: > 0 })
            {
                _items = _items.OrderBy(o => o.TransDate).ToList();
                var tmpGroup = _items.GroupBy(g => g.TransDate).Select(s => new
                {
                    TransDate = s.Key,
                    Amount = s.Sum(sm => sm.Amount)
                }).ToList();
                var tmpGroup1 = _items.GroupBy(g => g.TicketType).Select(s => new
                {
                    Service = s.Key == 0 ? "Air" : "Train",
                    Count = s.Sum(sm => sm.ActiveNo)
                }).ToList();
                var aData = tmpGroup.Select(s => s.Amount.ToRound(2)).ToList();
                aData.Insert(0, 0);
                var dataChart = new List<DataChartResponse>()
                {
                    new()
                    {
                        Data = aData
                    }
                };
                var cat = tmpGroup.Select(s => s.TransDate.ToDdMmm()).ToList();
                cat.Insert(0, "");
                var aData1 = tmpGroup1.Select(s => s.Count).ToList();
                var cat1 = tmpGroup1.Select(s => s.Service).ToList();
                await CallJs("initChartLine", "charts_1", dataChart, cat);
                await CallJs("initChartDotNut", "charts_2", aData1, cat1);
            }
        }

        if (InitDataTable)
        {
            InitDataTable = false;
            await CallInitialDataTable();
            await CallJs("initFixTable", UiConstants.StaticId, 3, 1);
        }
    }

    private async Task GetData()
    {
        _data = [];
        _request.DateRange = DateRange;
        IsLoading = true;
        StateHasChanged();
        _items = await _httpService.PostAsync<List<SumBookingResponse>>($"{ShareEndpoints.Report}/sum-by", _request);
        if (ShareUserInfo?.Role != null)
        {
            _data = await _httpService.PostAsync<List<StoreBookingDto>>($"{ShareEndpoints.Report}", _request);
            _data = _data.OrderBy(o => o.TranDate).ToList();
        }
        IsLoading = false;
        InitDataTable = true;
        _initChart = true;
        StateHasChanged();
    }

}