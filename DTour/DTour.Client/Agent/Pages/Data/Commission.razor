@page "/agent/commission"

@attribute [Authorize(Roles = $"{RoleConstants.AccountingRole}")]
<PageTitle>@Loc["Commission"]</PageTitle>
<SectionContent SectionName="@NavConstants.TbLeft">
    <Breadcrumb Slash="true"></Breadcrumb>
    <Breadcrumb TextMuted="true">@Loc["Commission"]</Breadcrumb>
</SectionContent>
<SectionContent SectionName="@NavConstants.TbRight">
    <button class="btn btm-sm btn-custom align-self-center" @onclick="() => FormAction(-1, 0)">
        <i class="fa fa-plus-square"></i>@Loc["Add new"]
    </button>
</SectionContent>
@if (IsLoading)
{
    <LoadingRotate/>
}
<Card Title="@Loc["List of Commission"]">
    @if (_items == null || IsLoading)
    {
        <Loading/>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover table-rounded table-striped border gy-7 gs-7" id="@UiConstants.TableId">
                <thead>
                <tr class="fw-semibold fs-6 text-gray-800 border-bottom-2 border-gray-200">
                    <th>@Loc["Action"]</th>
                    <th>@Loc["Agent"]</th>
                    <th>@Loc["Percent"]</th>
                    <th>@Loc["From"]</th>
                    <th>@Loc["To"]</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var t in _items.WithIndex())
                {
                    <tr>
                        <td>
                            <button @key="Guid.NewGuid()" class="btn btn-sm btn-icon btn-success"
                                    @onclick="@(() => FormAction(t.index, 1))">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button @key="Guid.NewGuid()" class="btn btn-sm btn-icon btn-danger"
                                    @onclick="@(() => FormAction(t.index, 2))">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                        <td>@_agents?.FirstOrDefault(w => w.Id == $"{t.item.AgentId}".ToGuid())?.Name</td>
                        <td>@t.item.Percent</td>
                        <td>@t.item.From.ToDmy()</td>
                        <td>@t.item.To.ToDmy()</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }
</Card>
<CustomModal Title="@($"{Title} Commission")" OnClickCallback="SaveData" SaveTitle="@Loc["Save Change"]"
             CancelTitle="@Loc["Cancel"]">
    <EditForm Model="data" class="form">
        <FluentValidationValidator @ref="_fluentValidationValidator"/>
        <div class="row mb-7">
            <label class="required">@Loc["Agent"]</label>
            <select class="form-select bg-light-warning" data-control="select2" data-id="cus"
                    data-dropdown-parent="#@UiConstants.GetModalNameDefault">
                <option value="">Select Item</option>
                @foreach (var indexEntity in _agents!)
                {
                    <option value="@indexEntity.Id"
                            selected="@(data!.AgentId == $"{indexEntity.Id}")">@indexEntity.Code @indexEntity.Name</option>
                }
            </select>
            <ValidationMessage For="@(() => data!.AgentId)"/>
        </div>
        <div class="row mb-7">
            <label class="required">@Loc["Percent"]</label>
            <input class="form-control form-control-sm numberinputmask"
                   @bind="@data!.Percent"/>
            <ValidationMessage For="@(() => data.Percent)"/>
        </div>
        <div class="row">
            <div class="col-md-6">
                <label class="required">@Loc["From"] (mm/dd/yyyy)</label>
                <InputDate @bind-Value="@data!.From" class="form-control" data-control="date-picker"/>
                <ValidationMessage For="@(() => data.From)"/>
            </div>
            <div class="col-md-6">
                <label class="required">@Loc["To"] (mm/dd/yyyy)</label>
                <InputDate @bind-Value="@data!.To" class="form-control" data-control="date-picker"/>
                <ValidationMessage For="@(() => data.To)"/>
            </div>
        </div>
    </EditForm>
</CustomModal>

@code {
    private List<CommissionDto>? _items;
    private List<AgentDto>? _agents;
    private CommissionDto? data = new();
    private int iAction { get; set; } = 0;
    private string Title { get; set; } = "Add new";
    private FluentValidationValidator _fluentValidationValidator = default!;

    protected override async Task OnInitializedAsync()
    {
        _items = await _httpService.GetAsync<List<CommissionDto>>($"{ShareEndpoints.Commission}");
        _agents = await _httpService.GetAsync<List<AgentDto>>($"{ShareEndpoints.Agent}");
        InitDataTable = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (InitDataTable)
        {
            InitDataTable = false;
            await CallInitialDataTable();
        }
    }

    [JSInvokable]
    public void UpdateSelect2(string value, string controlId)
    {
        data!.AgentId = value;
        data!.Email = _agents!.FirstOrDefault(w => w.Id == $"{value}".ToGuid())?.Email;
    }

    private async Task FormAction(int index, int action)
    {
        data = new CommissionDto();
        if (index >= 0)
        {
            _items![index].Adapt(data);
        }

        iAction = action;
        Title = action switch
        {
            1 => "Edit",
            2 => "Delete",
            _ => "Add new"
        };
        await ToggleModal();
        await SetSelectTextNum();
        await InitDatePicker2M();
    }

    private async Task SaveData()
    {
        var isValid = _fluentValidationValidator.Validate(o => o.IncludeAllRuleSets());
        if (!isValid) return;
        IsLoading = true;
        StateHasChanged();
        var result = new ResultClient<Guid>();
        switch (iAction)
        {
            case 2:
                if (data != null)
                {
                    result = await _httpService.DeleteAsync<ResultClient<Guid>>($"{ShareEndpoints.Commission}/{data.Id}");
                    if (result.Succeeded)
                    {
                        _items?.Remove(data);
                    }
                }

                break;
            default:
                result = await _httpService.PostAsync<ResultClient<Guid>>(ShareEndpoints.Commission, new AddEditDataRequest<CommissionDto>()
                {
                    Data = data!,
                    Action = iAction == 0 ? ActionCommandType.Add : ActionCommandType.Edit,
                });
                if (result.Succeeded)
                {
                    if (iAction == 0)
                    {
                        data!.Id = result.Data;
                        _items?.Add(data);
                    }
                    else
                    {
                        var oFind = _items!.FirstOrDefault(w => w.Id == data!.Id);
                        if (oFind != null)
                        {
                            data.Adapt(oFind);
                        }
                    }
                }

                break;
        }

        await ShowAlert(result.Messages[0], result.Succeeded ? 0 : 1);
        IsLoading = false;
        InitDataTable = true;
        StateHasChanged();
        await ToggleModal();
    }

}