@page "/agent/approve-top-up"
<PageTitle>@Loc["Approve Top-up"]</PageTitle>
@attribute [Authorize(Roles = RoleConstants.AccountingRole)]
<SectionContent SectionName="@NavConstants.TbLeft">
    <Breadcrumb Slash="true"></Breadcrumb>
    <Breadcrumb>@Loc["Approve Top-up"]</Breadcrumb>
</SectionContent>
@if (IsLoading)
{
    <LoadingRotate/>
}

<Card Title="@Loc["List of Request Top-up"]">
    @* <ToolbarRight> *@
    @*     <button class="btn btm-sm btn-custom align-self-center" @onclick="() => FormAction(new TopUpDto(), 0)"> *@
    @*         <i class="fa fa-plus-square"></i>@Loc["Add new"] *@
    @*     </button> *@
    @* </ToolbarRight> *@
    <ChildContent>
        @if (_items == null || IsLoading)
        {
            <Loading/>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-hover table-rounded table-striped border gy-7 gs-7" id="@UiConstants.TableId">
                    <thead>
                    <tr class="fw-semibold fs-6 text-gray-800 border-bottom-2 border-gray-200">
                        <th>@Loc["Action"]</th>
                        <th>@Loc["Date"]</th>
                        <th>@Loc["Name"]</th>
                        <th>@Loc["Amount"]</th>
                        <th>@Loc["Note"]</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var t in _items.WithIndex())
                    {
                        <tr>
                            <td>
                                <button @key="Guid.NewGuid()" class="btn btn-sm btn-icon btn-success"
                                        @onclick="(e) => FormAction(t.index, 1)">
                                    <i class="fas fa-check-circle"></i>
                                </button>
                                <button @key="Guid.NewGuid()" class="btn btn-sm btn-icon btn-danger"
                                        @onclick="@(() => FormAction(t.index, 2))">
                                    <i class="fas fa-cancel"></i>
                                </button>
                                @if (t.item.FileContent.NotIsNullOrEmpty())
                                {
                                    <button @key="Guid.NewGuid()" class="btn btn-sm btn-icon btn-warning ms-2"
                                            @onclick="@(() => FormAction(t.index, 5))">
                                        <i class="fas fa-download"></i>
                                    </button>
                                }
                            </td>
                            <td>@t.item.RequestDate.ToLocalTime().ToDmy()</td>
                            <td>@t.item.DisplayName</td>
                            <td>@t.item.RequestAmount.ToString("N2")</td>
                            <td class="w-25">@t.item.Note</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
    </ChildContent>
</Card>
<CustomModal Title="@($"{Title} Top up")" OnClickCallback="SaveData" SaveTitle="@Loc["Save Change"]"
             CancelTitle="@Loc["Cancel"]">
    <EditForm Model="data" class="form">
        <FluentValidationValidator @ref="_fluentValidationValidator"/>
        <h4>@data?.Note</h4>
        <h5>@Loc["Amount"]: @data?.RequestAmount.ToString("N2")</h5>
        <h5>@Loc["Is Deposit"]: @Loc[(data?.IsDeposit == true ? "Yes" : "No")]</h5>
        <div class="row mb-7">
            <label class="form-label required">@Loc["Note"]</label>
            <InputTextArea type="text" @bind-Value="@data!.AccNote" class="form-control maxlength" rows="3"
                           maxlength="500"/>
            <ValidationMessage For="@(() => data.AccNote)"/>
        </div>
        @if (iAction == 0)
        {
            <div class="row mb-7">
                <label class="form-label">@Loc["User"]</label>
                <select class="form-select bg-light-warning" data-control="select2" data-id="config"
                        data-dropdown-parent="#@UiConstants.GetModalNameDefault">
                    <option value="">Select Item</option>
                    @foreach (var iUser in _agents)
                    {
                        <option value="@iUser.Id"
                                selected="@($"{iUser.Id}" == data.UserId)">@iUser.Code @iUser.Name</option>
                    }
                </select>
            </div>
            <div class="row">
                <div class="form-check form-switch form-check-custom form-check-warning form-check-solid me-6 mt-9">
                    <input class="form-check-input" type="checkbox"
                           @bind="@data.IsDeposit" id="flexSwitchShareRoom"/>
                    <label class="form-check-label" for="flexSwitchShareRoom">
                        @Loc["Is Deposit"]
                    </label>
                </div>
            </div>
        }
        <div class="row mb-7">
            <label class="fs-6 fw-semibold form-label">@Loc["Amount"]</label>
            <input class="form-control numberinputmask" @bind="@data!.ApproveAmount"/>
            <ValidationMessage For="@(() => data.ApproveAmount)"/>
        </div>
    </EditForm>
</CustomModal>


@code {
    private List<TopUpDto>? _items = [];
    private TopUpDto? data = new();
    private int iAction { get; set; } = 0;
    private string Title { get; set; } = "Approve Top-up";
    private List<AgentDto> _agents = new();
    private FluentValidationValidator _fluentValidationValidator = default!;
    [CascadingParameter] private UserInfo? ShareUserInfo { get; set; }

    private GetReportRequest _request = new()
    {
        Status = [1],
        CommandType = ActionCommandType.Approve
    };

    protected override async Task OnInitializedAsync()
    {
        _agents = await _httpService.GetAsync<List<AgentDto>>($"{ShareEndpoints.Agent}");
        await GetData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (InitDataTable)
        {
            InitDataTable = false;
            await CallInitialDataTable();
        }
    }

    private async Task GetData()
    {
        IsLoading = true;
        StateHasChanged();
        _request.DateRange = DateRange;
        _items = await _httpService.PostAsync<List<TopUpDto>>($"{ShareEndpoints.TopUp}{ActionController.Get}", _request);
        IsLoading = false;
        InitDataTable = true;
        StateHasChanged();
    }

    private async Task FormAction(int index, int action)
    {
        var item = _items![index];
        if (action == 5)
        {
            if (item.FileContent.IsNullOrEmpty()) return;
            var content = Convert.FromBase64String(item.FileContent!);
            await BlazorDownloadFile(item.FileName, "application/octet-stream", content);
            return;
        }

        data = new TopUpDto();
        item.Adapt(data);
        iAction = action;
        Title = action switch
        {
            1 => "Edit",
            2 => "Delete",
            _ => "Add new"
        };
        switch (action)
        {
            case 0:
                data.UserId = $"{_agents[0].Id}";
                data.DisplayName = _agents[0].Name;
                break;
            default:
                data.ApproveAmount = data.RequestAmount;
                break;
        }

        await ToggleModal();
        await SetSelectTextNum();
    }

    [JSInvokable]
    public void UpdateSelect2(string value, string controlId)
    {
        data!.UserId = value;
        data.DisplayName = _agents.FirstOrDefault(w => w.Id.ToString() == value)?.Name;
    }

    private async Task SaveData()
    {
        switch (iAction)
        {
            case 0 or 2 when $"{data!.AccNote}".IsNullOrEmpty():
                await ShowAlert("Please enter the reason", 1);
                return;
            case 0 when data!.ApproveAmount == 0:
                await ShowAlert("Please enter the amount", 1);
                return;
        }

        data!.ApproveDate = DateTime.UtcNow;
        IsLoading = true;
        StateHasChanged();
        data!.Status = 2;
        switch (iAction)
        {
            case 0:
                data!.Note = data.AccNote;
                data!.AccNote = string.Empty;
                data.RequestAmount = data.ApproveAmount;
                break;
            case 2:
                data.Status = 3;
                break;
        }

        var result = await _httpService.PostAsync<ResultClient<Guid>>($"{ShareEndpoints.TopUp}{ActionController.AddEdit}", new AddEditDataRequest<TopUpDto>()
        {
            Data = data!,
            Action = iAction == 0 ? ActionCommandType.AddApprove : ActionCommandType.Approve,
        });
        if (result.Succeeded)
        {
            if (iAction != 0)
            {
                _items = _items?.Where(w => w.Id != data.Id).ToList();
            }
        }

        await ShowAlert(result.Messages[0], result.Succeeded ? 0 : 1);
        IsLoading = false;
        InitDataTable = true;
        StateHasChanged();
        await ToggleModal();
    }

}