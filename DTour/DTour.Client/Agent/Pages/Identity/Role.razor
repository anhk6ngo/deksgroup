@page "/agent/role"
@attribute [StreamRendering]
@attribute [Authorize(Roles = RoleConstants.AdministratorRole)]
@inject IHttpServiceClient _httpService
<PageTitle>Roles And Set Rights</PageTitle>
<SectionContent SectionName="@NavConstants.TbLeft">
    <Breadcrumb>@Loc["Roles"]</Breadcrumb>
</SectionContent>
<SectionContent SectionName="@NavConstants.TbRight">
    <button class="btn btn-custom" @onclick="ShowRightForm">@Loc[$"{(SetRight ? "Roles" : "Set Rights")}"]</button>
</SectionContent>
@if (SetRight)
{
    if (IsLoading)
    {
        <Loading/>
    }
    else
    {
        <Card OnlyCardBody="true">
            <div class="row">
                <div class="col-md-8">
                    <div class="row">
                        <div class="col-md-12 mb-5">
                            <label class="form-label">@Loc["User"]</label>
                            <select class="form-select" id="endUser">
                                @foreach (var iUser in SelectUsers)
                                {
                                    <option value="@iUser.id">@iUser.text</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-12 mb-5">
                            <label class="form-label">@Loc["Roles"]</label>
                            <select class="form-select" id="role" multiple>
                                @foreach (var iRole in Data!)
                                {
                                    <option value="@iRole.Name">@iRole.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="row">
                        <div class="d-flex flex-stack">
                            <div class="form-check form-check-custom form-check-solid">
                                <input class="form-check-input" type="radio" checked="@(ActionRight == 0)" @onchange="@(() => ActionRight = 0)" id="gMethod"/>
                                <label class="form-check-label" for="gMethod">
                                    @Loc["View Roles on User"]
                                </label>
                            </div>
                            <div class="form-check form-check-custom form-check-solid">
                                <input class="form-check-input" type="radio" checked="@(ActionRight == 1)" @onchange="@(() => ActionRight = 1)" id="gMethod1"/>
                                <label class="form-check-label" for="gMethod1">
                                    @Loc["Set Role for User"]
                                </label>
                            </div>
                            <div class="form-check form-check-custom form-check-solid">
                                <input class="form-check-input" type="radio" checked="@(ActionRight == 2)" @onchange="@(() => ActionRight = 2)" id="gMethod2"/>
                                <label class="form-check-label" for="gMethod2">
                                    @Loc["Remove Role on User"]
                                </label>
                            </div>
                            <div class="form-check form-check-custom form-check-solid">
                                <input class="form-check-input" type="radio" checked="@(ActionRight == 3)" @onchange="@(() => ActionRight = 3)" id="gMethod2"/>
                                <label class="form-check-label" for="gMethod2">
                                    @Loc["Update Station"]
                                </label>
                            </div>
                            <button class="btn btn-success" @onclick="RoleAction">
                                <i class="ki-duotone ki-security-user">
                                    <span class="path1"></span>
                                    <span class="path2"></span>
                                </i> @Loc["Do it"]
                            </button>
                        </div>
                    </div>
                    <div class="row">
                        <label class="form-label">@Loc["Station"]</label>
                        <input @bind="data.Description" class="form-control"/>
                    </div>
                </div>
                <div class="col-md-4">
                    @if (UserInRoles is { Count: > 0 })
                    {
                        <h4>@Loc["User have role"]</h4>
                        foreach (var iRole in UserInRoles)
                        {
                            <p>@iRole.text</p>
                        }
                    }
                </div>
            </div>
        </Card>
    }
}
else
{
    @if (Data == null)
    {
        <Loading/>
    }
    else
    {
        <h1>@Loc["List of Roles"]</h1>
        @if (Data is { Count: > 0 })
        {
            <div class="row g-5 g-xl-9">
                @foreach (var item in Data)
                {
                    <div class="col-md-4">
                        <div class="card card-flush h-md-100">
                            <div class="card-header">
                                <div class="card-title">
                                    <h2>@item.Name</h2>
                                </div>
                            </div>
                            <div class="card-body pt-1">
                                <div class="fw-bold text-gray-600 mb-5">@Loc["Total users with this role"]: @item.Users</div>
                                <p>@item.Description</p>
                            </div>
                            <div class="card-footer flex-wrap pt-0">
                                <button type="button" class="btn btn-light btn-active-primary my-1 me-2" data-bs-toggle="modal"
                                        data-bs-target="#app_modal_1" @onclick="() => ActionData(item.id, 4)">
                                    @Loc["View Users"]
                                </button>
                                <button type="button" class="btn btn-light btn-active-light-primary my-1" data-bs-toggle="modal"
                                        data-bs-target="#app_modal_1" @onclick="() => ActionData(item.id, 1)">
                                    @Loc["Edit Role"]
                                </button>
                                <button type="button" class="btn btn-light-danger my-1" data-bs-toggle="modal"
                                        data-bs-target="#app_modal_1" @onclick="() => ActionData(item.id, 2)">
                                    @Loc["Delete Role"]
                                </button>
                                <button type="button" class="btn btn-light-warning my-1" data-bs-toggle="modal"
                                        data-bs-target="#app_modal_1" @onclick="() => ActionData(item.id, 3)">
                                    @Loc["Clear Users"]
                                </button>
                            </div>
                        </div>
                    </div>
                }
                <div class="col-md-3">
                    <div class="card h-md-100">
                        <div class="card-body d-flex flex-center">
                            <button class="btn btn-clear d-flex flex-column flex-center" data-bs-toggle="modal" data-bs-target="#app_modal_1"
                                    @onclick="() => ActionData(string.Empty, 0)">
                                <img src="img/addRole.png" alt="" class="mw-100 mh-150px mb-7"/>
                                <div class="fw-bold fs-3 text-gray-600 text-hover-primary">@Loc["Add New Role"]</div>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
}

<CustomModal Title="@($"{Title} Role")" OnClickCallback="SaveData" HideSaveButton="@(iAction == 4)">
    @if (iAction == 4)
    {
        @if (ViewUsers is { Count: > 0 })
        {
            <h4>@Loc["Role"]: @data.Name</h4>
            <div class="d-flex flex-column text-gray-600 scroll mh-500px">
                @foreach (var iUser in ViewUsers)
                {
                    <div class="d-flex align-items-center py-2">
                        <span class="bullet bg-primary me-3"></span> @iUser.text
                    </div>
                }
            </div>
        }
    }
    else
    {
        <EditForm Model="data" class="form">
            <FluentValidationValidator @ref="_fluentValidationValidator"/>
            <div class="row mb-7">
                <label class="required">@Loc["Name"]</label>
                <InputText type="text" @bind-Value="@data!.Name" class="form-control maxlength" maxlength="255"/>
                <ValidationMessage For="@(() => data.Name)"/>
            </div>
            <div class="row mb-7">
                <label class="required">@Loc["Description"]</label>
                <InputText type="text" @bind-Value="@data.Description" class="form-control maxlength" maxlength="255"/>
                <ValidationMessage For="@(() => data.Description)"/>
            </div>
        </EditForm>
    }

</CustomModal>

@code {
    private List<RoleUserDto>? Data;
    private List<RoleUserDto> SelectUsers = new();
    private List<RoleUserDto> UserInRoles = new();
    private List<RoleUserDto> ViewUsers = new();
    private readonly IList<RoleUserDto> _emptyList = new List<RoleUserDto>();
    private bool SetRight { get; set; }
    private int ActionRight { get; set; }
    private RoleUserDto data { get; set; } = new();
    private string Title { get; set; } = "Add new";
    private int iAction { get; set; } = 0;
    private FluentValidationValidator _fluentValidationValidator = default!;

    protected override async Task OnInitializedAsync()
    {
        Data = await _httpService.GetAsync<List<RoleUserDto>>($"{ShareEndpoints.Role}");
    }

    private async Task ShowRightForm()
    {
        SetRight = !SetRight;
        if (SetRight && SelectUsers is { Count: 0 })
        {
            SelectUsers = await _httpService.GetAsync<List<RoleUserDto>>($"{ShareEndpoints.Role}/By?action=0&claimType={DisplayConstants.Full}");
        }

        StateHasChanged();
        if (SetRight)
        {
            data.id = SelectUsers[0].id;
            await CallJsWithCallBack("setSelect2aIndex", "#endUser", _emptyList, 0);
            await CallJsWithCallBack("setSelect2aIndex", "#role", _emptyList, 1);
        }
    }

    private async Task SaveData()
    {
        var isValid = _fluentValidationValidator.Validate(o => o.IncludeAllRuleSets());
        if (!isValid) return;
        var blnResult = false;
        switch (iAction)
        {
            case 3:
                if (data.Users == 0) return;
                blnResult = await _httpService.PostAsync<bool>($"{ShareEndpoints.Role}", new AddEditRoleRequest()
                {
                    Action = ActionCommandType.Edit,
                    Data = new RoleUserDto() { Name = data.id },
                    IsSetRight = true
                });
                if (blnResult)
                {
                    data.Users = 0;
                }

                break;
            default:
                var sResult = await _httpService.PostAsync<string>($"{ShareEndpoints.Role}", new AddEditRoleRequest()
                {
                    Action = (ActionCommandType)iAction,
                    Data = data,
                    IsSetRight = SetRight
                });
                if ($"{sResult}" != "")
                {
                    blnResult = true;
                    switch (iAction)
                    {
                        case 0:
                            data.id = sResult;
                            Data?.Add(data);
                            break;
                        case 2:
                            Data?.Remove(data);
                            break;
                    }
                }

                break;
        }

        await ShowAlert(blnResult ? 0 : 1);
        await ToggleModal();
    }

    private async Task RoleAction()
    {
        var blnResult = true;
        switch (ActionRight)
        {
            case 0:
                UserInRoles = await _httpService.GetAsync<List<RoleUserDto>>($"{ShareEndpoints.Role}/By?action=4&id={data.id}");
                StateHasChanged();
                break;
            default:
                blnResult = await _httpService.PostAsync<bool>($"{ShareEndpoints.Role}", new AddEditRoleRequest()
                {
                    Action = ActionRight == 1 ? ActionCommandType.Add : ActionRight == 3 ? ActionCommandType.Copy : ActionCommandType.Delete,
                    Data = data,
                    IsSetRight = SetRight
                });
                break;
        }

        await ShowAlert(blnResult ? 0 : 1);
    }

    private async Task ActionData(string? itemId, int action)
    {
        data = action switch
        {
            0 => new RoleUserDto(),
            _ => Data?.FirstOrDefault(w => w.id == itemId)!
        };
        iAction = action;
        Title = action switch
        {
            1 => "Edit",
            2 => "Delete",
            3 => $"Clear All Users on {data.Name} ",
            4 => $"View Users in Role {data.Name}",
            _ => "Add new"
        };
        if (action == 4)
        {
            ViewUsers = await _httpService.GetAsync<List<RoleUserDto>>($"{ShareEndpoints.Role}/By?action=2&id={data.Name}");
        }

        await ToggleModal();
        await SetMaxLength();
    }

    [JSInvokable]
    public void Select2ACallbackIndex(string value, string nameControl, int index)
    {
        switch (index)
        {
            case 0:
                data.id = value;
                break;
            case 1:
                data.Name = value;
                break;
        }
    }

}